name: Unit and integration tests, and code quality report

on:
    push:
    pull_request:
        branches:
            - main

jobs:
    build:
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                python-version: ["3.11"]

        steps:
            - uses: actions/checkout@v3
            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v3
              with:
                  python-version: ${{ matrix.python-version }}
            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  python -m pip install flake8 pytest
                  python -m pip install code-quality
                  if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
            - name: Lint with flake8
              run: |
                  # stop the build if there are Python syntax errors or undefined names
                  flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
                  # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
                  flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
            - name: Run tests with pytest
              run: |
                  pytest unit_tests.py
                  pytest test_app.py

            - name: Run code-quality analysis
              run: |
                  python -m code_quality -d . > code_quality_report.txt
                  echo "::set-output name=code_quality_report::$(cat code_quality_report.txt)"
            - name: Add code quality report to job summary
              if: always()
              run: |
                  echo '### Code Quality Report' >> $GITHUB_STEP_SUMMARY
                  sed 's/^=*//; s/=*$//' code_quality_report.txt > temp_report.txt
                  awk '
                  /Starting Quality Test Session|Summary|Possible Resolution|Check completed/ {
                      print "\n\n==========", $0, "==========\n"
                      next
                  }
                  { print }
                  ' temp_report.txt >> $GITHUB_STEP_SUMMARY
                  rm temp_report.txt # Cleanup
